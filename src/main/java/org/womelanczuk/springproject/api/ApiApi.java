/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.womelanczuk.springproject.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;
import org.womelanczuk.springproject.model.Person;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-09-01T12:20:46.126100700+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "api", description = "the api API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /api/contacts : Deletes a contact.
     *
     * @param id The ID of the user to delete. (required)
     * @return A user object. (status code 200)
     */
    @Operation(
        operationId = "apiContactsDelete",
        summary = "Deletes a contact.",
        responses = {
            @ApiResponse(responseCode = "200", description = "A user object.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/contacts"
    )
    default ResponseEntity<?> _apiContactsDelete(
        @NotNull @Parameter(name = "id", description = "The ID of the user to delete.", required = true, in = ParameterIn.QUERY) @Valid Person id
    ) {
        return apiContactsDelete(id);
    }

    // Override this method
    default  ResponseEntity<?> apiContactsDelete(Person id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/contacts : Returns a list of users.
     * Optional extended description in CommonMark or HTML
     *
     * @return A JSON array of user names (status code 200)
     */
    @Operation(
        operationId = "apiContactsGet",
        summary = "Returns a list of users.",
        description = "Optional extended description in CommonMark or HTML",
        responses = {
            @ApiResponse(responseCode = "200", description = "A JSON array of user names", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Person.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/contacts",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Person>> _apiContactsGet(
        
    ) {
        return apiContactsGet();
    }

    // Override this method
    default  ResponseEntity<List<Person>> apiContactsGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"number\" : \"number\", \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0 }, { \"number\" : \"number\", \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/contacts : Creates a contact.
     *
     * @param person  (required)
     * @return Created (status code 201)
     */
    @Operation(
        operationId = "apiContactsPost",
        summary = "Creates a contact.",
        responses = {
            @ApiResponse(responseCode = "201", description = "Created")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/contacts",
        consumes = { "application/json" }
    )
    default ResponseEntity<?> _apiContactsPost(
        @Parameter(name = "Person", description = "", required = true) @Valid @RequestBody Person person
    ) {
        return apiContactsPost(person);
    }

    // Override this method
    default  ResponseEntity<?> apiContactsPost(Person person) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/contacts/{sortingtype} : Returns sorted list of contacts.
     *
     * @param sortingtype The type of sorting (required)
     * @return A user object. (status code 200)
     */
    @Operation(
        operationId = "apiContactsSortingtypeGet",
        summary = "Returns sorted list of contacts.",
        responses = {
            @ApiResponse(responseCode = "200", description = "A user object.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Person.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/contacts/{sortingtype}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Person>> _apiContactsSortingtypeGet(
        @Parameter(name = "sortingtype", description = "The type of sorting", required = true, in = ParameterIn.PATH) @PathVariable("sortingtype") String sortingtype
    ) {
        return apiContactsSortingtypeGet(sortingtype);
    }

    // Override this method
    default  ResponseEntity<List<Person>> apiContactsSortingtypeGet(String sortingtype) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"number\" : \"number\", \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0 }, { \"number\" : \"number\", \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
